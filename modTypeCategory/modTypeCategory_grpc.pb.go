// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: modTypeCategory/modTypeCategory.proto

package ModTypeCategory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModTypeCategoryServiceClient is the client API for ModTypeCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModTypeCategoryServiceClient interface {
	GetModTypeCategoryByID(ctx context.Context, in *GetModTypeCategoryByIDRequest, opts ...grpc.CallOption) (*GetModTypeCategoryByIDResponse, error)
	GetModTypeCategoriesByModTypeID(ctx context.Context, in *GetModTypeCategoriesByModTypeIDRequest, opts ...grpc.CallOption) (*GetModTypeCategoriesByModTypeIDResponse, error)
	GetModTypeCategories(ctx context.Context, in *GetModTypeCategoriesRequest, opts ...grpc.CallOption) (*GetModTypeCategoriesResponse, error)
}

type modTypeCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModTypeCategoryServiceClient(cc grpc.ClientConnInterface) ModTypeCategoryServiceClient {
	return &modTypeCategoryServiceClient{cc}
}

func (c *modTypeCategoryServiceClient) GetModTypeCategoryByID(ctx context.Context, in *GetModTypeCategoryByIDRequest, opts ...grpc.CallOption) (*GetModTypeCategoryByIDResponse, error) {
	out := new(GetModTypeCategoryByIDResponse)
	err := c.cc.Invoke(ctx, "/modTypeCategory_service.ModTypeCategoryService/GetModTypeCategoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modTypeCategoryServiceClient) GetModTypeCategoriesByModTypeID(ctx context.Context, in *GetModTypeCategoriesByModTypeIDRequest, opts ...grpc.CallOption) (*GetModTypeCategoriesByModTypeIDResponse, error) {
	out := new(GetModTypeCategoriesByModTypeIDResponse)
	err := c.cc.Invoke(ctx, "/modTypeCategory_service.ModTypeCategoryService/GetModTypeCategoriesByModTypeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modTypeCategoryServiceClient) GetModTypeCategories(ctx context.Context, in *GetModTypeCategoriesRequest, opts ...grpc.CallOption) (*GetModTypeCategoriesResponse, error) {
	out := new(GetModTypeCategoriesResponse)
	err := c.cc.Invoke(ctx, "/modTypeCategory_service.ModTypeCategoryService/GetModTypeCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModTypeCategoryServiceServer is the server API for ModTypeCategoryService service.
// All implementations must embed UnimplementedModTypeCategoryServiceServer
// for forward compatibility
type ModTypeCategoryServiceServer interface {
	GetModTypeCategoryByID(context.Context, *GetModTypeCategoryByIDRequest) (*GetModTypeCategoryByIDResponse, error)
	GetModTypeCategoriesByModTypeID(context.Context, *GetModTypeCategoriesByModTypeIDRequest) (*GetModTypeCategoriesByModTypeIDResponse, error)
	GetModTypeCategories(context.Context, *GetModTypeCategoriesRequest) (*GetModTypeCategoriesResponse, error)
	mustEmbedUnimplementedModTypeCategoryServiceServer()
}

// UnimplementedModTypeCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModTypeCategoryServiceServer struct {
}

func (UnimplementedModTypeCategoryServiceServer) GetModTypeCategoryByID(context.Context, *GetModTypeCategoryByIDRequest) (*GetModTypeCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModTypeCategoryByID not implemented")
}
func (UnimplementedModTypeCategoryServiceServer) GetModTypeCategoriesByModTypeID(context.Context, *GetModTypeCategoriesByModTypeIDRequest) (*GetModTypeCategoriesByModTypeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModTypeCategoriesByModTypeID not implemented")
}
func (UnimplementedModTypeCategoryServiceServer) GetModTypeCategories(context.Context, *GetModTypeCategoriesRequest) (*GetModTypeCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModTypeCategories not implemented")
}
func (UnimplementedModTypeCategoryServiceServer) mustEmbedUnimplementedModTypeCategoryServiceServer() {
}

// UnsafeModTypeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModTypeCategoryServiceServer will
// result in compilation errors.
type UnsafeModTypeCategoryServiceServer interface {
	mustEmbedUnimplementedModTypeCategoryServiceServer()
}

func RegisterModTypeCategoryServiceServer(s grpc.ServiceRegistrar, srv ModTypeCategoryServiceServer) {
	s.RegisterService(&ModTypeCategoryService_ServiceDesc, srv)
}

func _ModTypeCategoryService_GetModTypeCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModTypeCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModTypeCategoryServiceServer).GetModTypeCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modTypeCategory_service.ModTypeCategoryService/GetModTypeCategoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModTypeCategoryServiceServer).GetModTypeCategoryByID(ctx, req.(*GetModTypeCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModTypeCategoryService_GetModTypeCategoriesByModTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModTypeCategoriesByModTypeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModTypeCategoryServiceServer).GetModTypeCategoriesByModTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modTypeCategory_service.ModTypeCategoryService/GetModTypeCategoriesByModTypeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModTypeCategoryServiceServer).GetModTypeCategoriesByModTypeID(ctx, req.(*GetModTypeCategoriesByModTypeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModTypeCategoryService_GetModTypeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModTypeCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModTypeCategoryServiceServer).GetModTypeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modTypeCategory_service.ModTypeCategoryService/GetModTypeCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModTypeCategoryServiceServer).GetModTypeCategories(ctx, req.(*GetModTypeCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModTypeCategoryService_ServiceDesc is the grpc.ServiceDesc for ModTypeCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModTypeCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modTypeCategory_service.ModTypeCategoryService",
	HandlerType: (*ModTypeCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModTypeCategoryByID",
			Handler:    _ModTypeCategoryService_GetModTypeCategoryByID_Handler,
		},
		{
			MethodName: "GetModTypeCategoriesByModTypeID",
			Handler:    _ModTypeCategoryService_GetModTypeCategoriesByModTypeID_Handler,
		},
		{
			MethodName: "GetModTypeCategories",
			Handler:    _ModTypeCategoryService_GetModTypeCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modTypeCategory/modTypeCategory.proto",
}
